=====================================================
                       TO DO
=====================================================

-------
V 0.0.1

-> Features Expected:
  - elm::mptr fully working
  
  -> Allocator:
    - No memory loss
    
    -> Coalescing
      - Coalesce with previous block 
      - Coalesce with next block 
    -> Requesting blocks
      - Split initial block
      - Policy: split initial block further or try to best fit?
        - Implemented best fit
        - Split initial block and then best fit -> TODO

      - When trying to request a free block,
        if the Allocator cannot retrieve one,
        do a coalesce pass and try to get a block again

      -- TODO: there is a bug in BlockPool::requestBlock() where when emplacing back/emplacing/pushing back an element (from the second pool), m_pBigFreeBlock of the first pool
      changes its address. Maybe the thing is that when the std::list is creating this new
      element, it occupies the position/address of m_pBigFreeBlock from the first pool. It's 
      very strange in any case. 
      Maybe it will be fixed if replacing the std::list m_lBlocks for a std::vector or elm::vector.

-------